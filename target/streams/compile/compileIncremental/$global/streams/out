[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(C:\Users\dpetzoldt\Documents\GitHub\scala-datascience-scratch\src\main\scala\util\MapWrapper.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(C:\Users\dpetzoldt\Documents\GitHub\scala-datascience-scratch\src\main\scala\math\lina\Entries.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(math.lina.Entries.Map2Entries, math.lina.Entries.MapWrapper, math.lina.Entries, math.lina.Entries.Matrix2Entries)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(math.lina.Entries.Map2Entries, math.lina.Entries.MapWrapper, math.lina.Entries, math.lina.Entries.Matrix2Entries)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(C:\Users\dpetzoldt\Documents\GitHub\scala-datascience-scratch\src\main\scala\util\MapWrapper.scala, C:\Users\dpetzoldt\Documents\GitHub\scala-datascience-scratch\src\main\scala\math\lina\Entries.scala)[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 2 Scala sources to C:\Users\dpetzoldt\Documents\GitHub\scala-datascience-scratch\target\scala-2.12\classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.1.1:compile for Scala 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.1.1:compile for Scala 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 7a62d9ff for Scala compiler version 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Program Files\Java\jdk1.8.0_131\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\sunrsasign.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_131\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_131\jre\classes;C:\Users\dpetzoldt\.sbt\boot\scala-2.12.4\lib\scala-library.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Users\dpetzoldt\Documents\GitHub\scala-datascience-scratch\target\scala-2.12\classes;C:\Users\dpetzoldt\.ivy2\cache\org.typelevel\cats-core_2.12\jars\cats-core_2.12-1.0.1.jar;C:\Users\dpetzoldt\.ivy2\cache\org.typelevel\cats-macros_2.12\jars\cats-macros_2.12-1.0.1.jar;C:\Users\dpetzoldt\.ivy2\cache\org.typelevel\machinist_2.12\jars\machinist_2.12-0.6.2.jar;C:\Users\dpetzoldt\.sbt\boot\scala-2.12.4\lib\scala-reflect.jar;C:\Users\dpetzoldt\.ivy2\cache\org.typelevel\cats-kernel_2.12\jars\cats-kernel_2.12-1.0.1.jar;C:\Users\dpetzoldt\.ivy2\cache\org.scalactic\scalactic_2.12\bundles\scalactic_2.12-3.0.5.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 1.287056598 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from util.MapWrapper...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(util.MapWrapper)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding math.lina.Entries.Map2Entries by util.MapWrapper[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(math.lina.Entries.Map2Entries, util.MapWrapper)[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of math.lina.Entries: Set(UsedName(map,[Default]), UsedName(apply,[Default]), UsedName(MapWrapper,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mThe following modified names cause invalidation of math.lina.Entries.Map2Entries: Set(UsedName(apply,[Default]), UsedName(util;MapWrapper;init;,[Default]), UsedName(MapWrapper,[Default]), UsedName(toString,[Default]), UsedName(toMap,[Default]), UsedName(==,[Default]))[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(util.MapWrapper,ModifiedNames(changes = UsedName(parCombiner,[Default]), UsedName(isDefinedAt,[Default]), UsedName(orElse,[Default]), UsedName(DefaultValuesIterable,[Default]), UsedName(##,[Default]), UsedName(reduceRight,[Default]), UsedName(reduceLeft,[Default]), UsedName(size,[Default]), UsedName(aggregate,[Default]), UsedName(isInstanceOf,[Default]), UsedName(keys,[Default]), UsedName(unzip,[Default]), UsedName(foreach,[Default]), UsedName(+,[Default]), UsedName(stringPrefix,[Default]), UsedName(hasDefiniteSize,[Default]), UsedName(withFilter,[Default]), UsedName(contains,[Default]), UsedName(newBuilder,[Default]), UsedName(sameElements,[Default]), UsedName(unzip3,[Default]), UsedName(span,[Default]), UsedName(wait,[Default]), UsedName(flatMap,[Default]), UsedName(count,[Default]), UsedName(sliceWithKnownBound,[Default]), UsedName(map,[Default]), UsedName(default,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(tails,[Default]), UsedName(find,[Default]), UsedName(slice,[Default]), UsedName(sliding,[Default]), UsedName(toArray,[Default]), UsedName(reduceLeftOption,[Default]), UsedName(groupBy,[Default]), UsedName(drop,[Default]), UsedName(takeRight,[Default]), UsedName(DefaultKeySet,[Default]), UsedName(sum,[Default]), UsedName(repr,[Default]), UsedName(thisCollection,[Default]), UsedName(keySet,[Default]), UsedName(asInstanceOf,[Default]), UsedName(get,[Default]), UsedName(filterImpl,[Default]), UsedName(apply,[Default]), UsedName(zipWithIndex,[Default]), UsedName(valuesIterator,[Default]), UsedName(toStream,[Default]), UsedName($asInstanceOf,[Default]), UsedName(Self,[Default]), UsedName(minBy,[Default]), UsedName(notifyAll,[Default]), UsedName(view,[Default]), UsedName(takeWhile,[Default]), UsedName(reduceOption,[Default]), UsedName(util;MapWrapper;init;,[Default]), UsedName(fold,[Default]), UsedName(++:,[Default]), UsedName(MapWrapper,[Default]), UsedName(equals,[Default]), UsedName(init,[Default]), UsedName(copyToBuffer,[Default]), UsedName(sliceWithKnownDelta,[Default]), UsedName(updated,[Default]), UsedName(MappedValues,[Default]), UsedName(keysIterator,[Default]), UsedName(last,[Default]), UsedName(companion,[Default]), UsedName($init$,[Default]), UsedName(flatten,[Default]), UsedName(nonEmpty,[Default]), UsedName(filterNot,[Default]), UsedName(toSet,[Default]), UsedName(grouped,[Default]), UsedName(filter,[Default]), UsedName(mapValues,[Default]), UsedName(synchronized,[Default]), UsedName(++,[Default]), UsedName(toVector,[Default]), UsedName(/:,[Default]), UsedName(canEqual,[Default]), UsedName(sizeHintIfCheap,[Default]), UsedName(copyToArray,[Default]), UsedName(maxBy,[Default]), UsedName(dropWhile,[Default]), UsedName(toBuffer,[Default]), UsedName(max,[Default]), UsedName(foldLeft,[Default]), UsedName(runWith,[Default]), UsedName(compose,[Default]), UsedName(genericBuilder,[Default]), UsedName(to,[Default]), UsedName(min,[Default]), UsedName(toString,[Default]), UsedName(collectFirst,[Default]), UsedName($isInstanceOf,[Default]), UsedName(seq,[Default]), UsedName(toTraversable,[Default]), UsedName(getClass,[Default]), UsedName(foldRight,[Default]), UsedName(zipAll,[Default]), UsedName(splitAt,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(tail,[Default]), UsedName(lift,[Default]), UsedName(FilteredKeys,[Default]), UsedName(partition,[Default]), UsedName(toMap,[Default]), UsedName(inits,[Default]), UsedName(-,[Default]), UsedName(empty,[Default]), UsedName(headOption,[Default]), UsedName(filterKeys,[Default]), UsedName(addString,[Default]), UsedName(forall,[Default]), UsedName(toIndexedSeq,[Default]), UsedName(zip,[Default]), UsedName(reduceRightOption,[Default]), UsedName(reversed,[Default]), UsedName(finalize,[Default]), UsedName(reduce,[Default]), UsedName(applyOrElse,[Default]), UsedName(exists,[Default]), UsedName(values,[Default]), UsedName(scan,[Default]), UsedName(ne,[Default]), UsedName(getOrElse,[Default]), UsedName(==,[Default]), UsedName(transpose,[Default]), UsedName(:\,[Default]), UsedName(toList,[Default]), UsedName(collect,[Default]), UsedName(andThen,[Default]), UsedName(toIterator,[Default]), UsedName(dropRight,[Default]), UsedName(product,[Default]), UsedName(WithFilter,[Default]), UsedName(scanRight,[Default]), UsedName(scanLeft,[Default]), UsedName(lastOption,[Default]), UsedName(isTraversableAgain,[Default]), UsedName(--,[Default]), UsedName(iterator,[Default]), UsedName(toIterable,[Default]), UsedName(toSeq,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(mkString,[Default]), UsedName(par,[Default]), UsedName(take,[Default]), UsedName(toCollection,[Default]))) invalidates 3 classes due to The util.MapWrapper has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(parCombiner,[Default]), UsedName(isDefinedAt,[Default]), UsedName(orElse,[Default]), UsedName(DefaultValuesIterable,[Default]), UsedName(##,[Default]), UsedName(reduceRight,[Default]), UsedName(reduceLeft,[Default]), UsedName(size,[Default]), UsedName(aggregate,[Default]), UsedName(isInstanceOf,[Default]), UsedName(keys,[Default]), UsedName(unzip,[Default]), UsedName(foreach,[Default]), UsedName(+,[Default]), UsedName(stringPrefix,[Default]), UsedName(hasDefiniteSize,[Default]), UsedName(withFilter,[Default]), UsedName(contains,[Default]), UsedName(newBuilder,[Default]), UsedName(sameElements,[Default]), UsedName(unzip3,[Default]), UsedName(span,[Default]), UsedName(wait,[Default]), UsedName(flatMap,[Default]), UsedName(count,[Default]), UsedName(sliceWithKnownBound,[Default]), UsedName(map,[Default]), UsedName(default,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(tails,[Default]), UsedName(find,[Default]), UsedName(slice,[Default]), UsedName(sliding,[Default]), UsedName(toArray,[Default]), UsedName(reduceLeftOption,[Default]), UsedName(groupBy,[Default]), UsedName(drop,[Default]), UsedName(takeRight,[Default]), UsedName(DefaultKeySet,[Default]), UsedName(sum,[Default]), UsedName(repr,[Default]), UsedName(thisCollection,[Default]), UsedName(keySet,[Default]), UsedName(asInstanceOf,[Default]), UsedName(get,[Default]), UsedName(filterImpl,[Default]), UsedName(apply,[Default]), UsedName(zipWithIndex,[Default]), UsedName(valuesIterator,[Default]), UsedName(toStream,[Default]), UsedName($asInstanceOf,[Default]), UsedName(Self,[Default]), UsedName(minBy,[Default]), UsedName(notifyAll,[Default]), UsedName(view,[Default]), UsedName(takeWhile,[Default]), UsedName(reduceOption,[Default]), UsedName(util;MapWrapper;init;,[Default]), UsedName(fold,[Default]), UsedName(++:,[Default]), UsedName(MapWrapper,[Default]), UsedName(equals,[Default]), UsedName(init,[Default]), UsedName(copyToBuffer,[Default]), UsedName(sliceWithKnownDelta,[Default]), UsedName(updated,[Default]), UsedName(MappedValues,[Default]), UsedName(keysIterator,[Default]), UsedName(last,[Default]), UsedName(companion,[Default]), UsedName($init$,[Default]), UsedName(flatten,[Default]), UsedName(nonEmpty,[Default]), UsedName(filterNot,[Default]), UsedName(toSet,[Default]), UsedName(grouped,[Default]), UsedName(filter,[Default]), UsedName(mapValues,[Default]), UsedName(synchronized,[Default]), UsedName(++,[Default]), UsedName(toVector,[Default]), UsedName(/:,[Default]), UsedName(canEqual,[Default]), UsedName(sizeHintIfCheap,[Default]), UsedName(copyToArray,[Default]), UsedName(maxBy,[Default]), UsedName(dropWhile,[Default]), UsedName(toBuffer,[Default]), UsedName(max,[Default]), UsedName(foldLeft,[Default]), UsedName(runWith,[Default]), UsedName(compose,[Default]), UsedName(genericBuilder,[Default]), UsedName(to,[Default]), UsedName(min,[Default]), UsedName(toString,[Default]), UsedName(collectFirst,[Default]), UsedName($isInstanceOf,[Default]), UsedName(seq,[Default]), UsedName(toTraversable,[Default]), UsedName(getClass,[Default]), UsedName(foldRight,[Default]), UsedName(zipAll,[Default]), UsedName(splitAt,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(tail,[Default]), UsedName(lift,[Default]), UsedName(FilteredKeys,[Default]), UsedName(partition,[Default]), UsedName(toMap,[Default]), UsedName(inits,[Default]), UsedName(-,[Default]), UsedName(empty,[Default]), UsedName(headOption,[Default]), UsedName(filterKeys,[Default]), UsedName(addString,[Default]), UsedName(forall,[Default]), UsedName(toIndexedSeq,[Default]), UsedName(zip,[Default]), UsedName(reduceRightOption,[Default]), UsedName(reversed,[Default]), UsedName(finalize,[Default]), UsedName(reduce,[Default]), UsedName(applyOrElse,[Default]), UsedName(exists,[Default]), UsedName(values,[Default]), UsedName(scan,[Default]), UsedName(ne,[Default]), UsedName(getOrElse,[Default]), UsedName(==,[Default]), UsedName(transpose,[Default]), UsedName(:\,[Default]), UsedName(toList,[Default]), UsedName(collect,[Default]), UsedName(andThen,[Default]), UsedName(toIterator,[Default]), UsedName(dropRight,[Default]), UsedName(product,[Default]), UsedName(WithFilter,[Default]), UsedName(scanRight,[Default]), UsedName(scanLeft,[Default]), UsedName(lastOption,[Default]), UsedName(isTraversableAgain,[Default]), UsedName(--,[Default]), UsedName(iterator,[Default]), UsedName(toIterable,[Default]), UsedName(toSeq,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(mkString,[Default]), UsedName(par,[Default]), UsedName(take,[Default]), UsedName(toCollection,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(math.lina.Entries.Map2Entries, util.MapWrapper)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> by member reference: Set(math.lina.Entries, math.lina.Entries.Map2Entries)[0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from math.lina.Entries.Map2Entries...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(math.lina.Entries.Map2Entries)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(math.lina.Entries.Map2Entries)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(math.lina.Entries.Map2Entries,ModifiedNames(changes = UsedName(+,[Default]), UsedName(Map2Entries,[Default]))) invalidates 1 classes due to The math.lina.Entries.Map2Entries has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(+,[Default]), UsedName(Map2Entries,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(math.lina.Entries.Map2Entries)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from math.lina.Entries.MapWrapper...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(math.lina.Entries.MapWrapper)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(math.lina.Entries.MapWrapper)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(math.lina.Entries.MapWrapper,ModifiedNames(changes = UsedName(parCombiner,[Default]), UsedName(isDefinedAt,[Default]), UsedName(orElse,[Default]), UsedName(DefaultValuesIterable,[Default]), UsedName(##,[Default]), UsedName(reduceRight,[Default]), UsedName(reduceLeft,[Default]), UsedName(size,[Default]), UsedName(aggregate,[Default]), UsedName(isInstanceOf,[Default]), UsedName(keys,[Default]), UsedName(unzip,[Default]), UsedName(foreach,[Default]), UsedName(+,[Default]), UsedName(stringPrefix,[Default]), UsedName(hasDefiniteSize,[Default]), UsedName(withFilter,[Default]), UsedName(contains,[Default]), UsedName(newBuilder,[Default]), UsedName(sameElements,[Default]), UsedName(unzip3,[Default]), UsedName(span,[Default]), UsedName(wait,[Default]), UsedName(flatMap,[Default]), UsedName(count,[Default]), UsedName(sliceWithKnownBound,[Default]), UsedName(map,[Default]), UsedName(default,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(tails,[Default]), UsedName(find,[Default]), UsedName(slice,[Default]), UsedName(sliding,[Default]), UsedName(toArray,[Default]), UsedName(reduceLeftOption,[Default]), UsedName(groupBy,[Default]), UsedName(drop,[Default]), UsedName(takeRight,[Default]), UsedName(DefaultKeySet,[Default]), UsedName(sum,[Default]), UsedName(repr,[Default]), UsedName(thisCollection,[Default]), UsedName(keySet,[Default]), UsedName(asInstanceOf,[Default]), UsedName(get,[Default]), UsedName(filterImpl,[Default]), UsedName(apply,[Default]), UsedName(zipWithIndex,[Default]), UsedName(valuesIterator,[Default]), UsedName(toStream,[Default]), UsedName($asInstanceOf,[Default]), UsedName(Self,[Default]), UsedName(minBy,[Default]), UsedName(notifyAll,[Default]), UsedName(view,[Default]), UsedName(takeWhile,[Default]), UsedName(reduceOption,[Default]), UsedName(fold,[Default]), UsedName(++:,[Default]), UsedName(MapWrapper,[Default]), UsedName(equals,[Default]), UsedName(init,[Default]), UsedName(copyToBuffer,[Default]), UsedName(sliceWithKnownDelta,[Default]), UsedName(updated,[Default]), UsedName(MappedValues,[Default]), UsedName(keysIterator,[Default]), UsedName(last,[Default]), UsedName(companion,[Default]), UsedName($init$,[Default]), UsedName(flatten,[Default]), UsedName(nonEmpty,[Default]), UsedName(filterNot,[Default]), UsedName(toSet,[Default]), UsedName(grouped,[Default]), UsedName(filter,[Default]), UsedName(mapValues,[Default]), UsedName(synchronized,[Default]), UsedName(++,[Default]), UsedName(toVector,[Default]), UsedName(/:,[Default]), UsedName(canEqual,[Default]), UsedName(sizeHintIfCheap,[Default]), UsedName(copyToArray,[Default]), UsedName(maxBy,[Default]), UsedName(dropWhile,[Default]), UsedName(toBuffer,[Default]), UsedName(max,[Default]), UsedName(foldLeft,[Default]), UsedName(runWith,[Default]), UsedName(compose,[Default]), UsedName(genericBuilder,[Default]), UsedName(to,[Default]), UsedName(min,[Default]), UsedName(toString,[Default]), UsedName(collectFirst,[Default]), UsedName($isInstanceOf,[Default]), UsedName(seq,[Default]), UsedName(toTraversable,[Default]), UsedName(getClass,[Default]), UsedName(foldRight,[Default]), UsedName(zipAll,[Default]), UsedName(splitAt,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(tail,[Default]), UsedName(lift,[Default]), UsedName(FilteredKeys,[Default]), UsedName(partition,[Default]), UsedName(toMap,[Default]), UsedName(inits,[Default]), UsedName(-,[Default]), UsedName(empty,[Default]), UsedName(headOption,[Default]), UsedName(filterKeys,[Default]), UsedName(addString,[Default]), UsedName(forall,[Default]), UsedName(math;lina;Entries;MapWrapper;init;,[Default]), UsedName(toIndexedSeq,[Default]), UsedName(zip,[Default]), UsedName(reduceRightOption,[Default]), UsedName(reversed,[Default]), UsedName(finalize,[Default]), UsedName(reduce,[Default]), UsedName(applyOrElse,[Default]), UsedName(exists,[Default]), UsedName(values,[Default]), UsedName(scan,[Default]), UsedName(ne,[Default]), UsedName(getOrElse,[Default]), UsedName(==,[Default]), UsedName(transpose,[Default]), UsedName(:\,[Default]), UsedName(toList,[Default]), UsedName(collect,[Default]), UsedName(andThen,[Default]), UsedName(toIterator,[Default]), UsedName(dropRight,[Default]), UsedName(product,[Default]), UsedName(WithFilter,[Default]), UsedName(scanRight,[Default]), UsedName(scanLeft,[Default]), UsedName(lastOption,[Default]), UsedName(isTraversableAgain,[Default]), UsedName(--,[Default]), UsedName(iterator,[Default]), UsedName(toIterable,[Default]), UsedName(toSeq,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(mkString,[Default]), UsedName(par,[Default]), UsedName(take,[Default]), UsedName(toCollection,[Default]))) invalidates 1 classes due to The math.lina.Entries.MapWrapper has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(parCombiner,[Default]), UsedName(isDefinedAt,[Default]), UsedName(orElse,[Default]), UsedName(DefaultValuesIterable,[Default]), UsedName(##,[Default]), UsedName(reduceRight,[Default]), UsedName(reduceLeft,[Default]), UsedName(size,[Default]), UsedName(aggregate,[Default]), UsedName(isInstanceOf,[Default]), UsedName(keys,[Default]), UsedName(unzip,[Default]), UsedName(foreach,[Default]), UsedName(+,[Default]), UsedName(stringPrefix,[Default]), UsedName(hasDefiniteSize,[Default]), UsedName(withFilter,[Default]), UsedName(contains,[Default]), UsedName(newBuilder,[Default]), UsedName(sameElements,[Default]), UsedName(unzip3,[Default]), UsedName(span,[Default]), UsedName(wait,[Default]), UsedName(flatMap,[Default]), UsedName(count,[Default]), UsedName(sliceWithKnownBound,[Default]), UsedName(map,[Default]), UsedName(default,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(tails,[Default]), UsedName(find,[Default]), UsedName(slice,[Default]), UsedName(sliding,[Default]), UsedName(toArray,[Default]), UsedName(reduceLeftOption,[Default]), UsedName(groupBy,[Default]), UsedName(drop,[Default]), UsedName(takeRight,[Default]), UsedName(DefaultKeySet,[Default]), UsedName(sum,[Default]), UsedName(repr,[Default]), UsedName(thisCollection,[Default]), UsedName(keySet,[Default]), UsedName(asInstanceOf,[Default]), UsedName(get,[Default]), UsedName(filterImpl,[Default]), UsedName(apply,[Default]), UsedName(zipWithIndex,[Default]), UsedName(valuesIterator,[Default]), UsedName(toStream,[Default]), UsedName($asInstanceOf,[Default]), UsedName(Self,[Default]), UsedName(minBy,[Default]), UsedName(notifyAll,[Default]), UsedName(view,[Default]), UsedName(takeWhile,[Default]), UsedName(reduceOption,[Default]), UsedName(fold,[Default]), UsedName(++:,[Default]), UsedName(MapWrapper,[Default]), UsedName(equals,[Default]), UsedName(init,[Default]), UsedName(copyToBuffer,[Default]), UsedName(sliceWithKnownDelta,[Default]), UsedName(updated,[Default]), UsedName(MappedValues,[Default]), UsedName(keysIterator,[Default]), UsedName(last,[Default]), UsedName(companion,[Default]), UsedName($init$,[Default]), UsedName(flatten,[Default]), UsedName(nonEmpty,[Default]), UsedName(filterNot,[Default]), UsedName(toSet,[Default]), UsedName(grouped,[Default]), UsedName(filter,[Default]), UsedName(mapValues,[Default]), UsedName(synchronized,[Default]), UsedName(++,[Default]), UsedName(toVector,[Default]), UsedName(/:,[Default]), UsedName(canEqual,[Default]), UsedName(sizeHintIfCheap,[Default]), UsedName(copyToArray,[Default]), UsedName(maxBy,[Default]), UsedName(dropWhile,[Default]), UsedName(toBuffer,[Default]), UsedName(max,[Default]), UsedName(foldLeft,[Default]), UsedName(runWith,[Default]), UsedName(compose,[Default]), UsedName(genericBuilder,[Default]), UsedName(to,[Default]), UsedName(min,[Default]), UsedName(toString,[Default]), UsedName(collectFirst,[Default]), UsedName($isInstanceOf,[Default]), UsedName(seq,[Default]), UsedName(toTraversable,[Default]), UsedName(getClass,[Default]), UsedName(foldRight,[Default]), UsedName(zipAll,[Default]), UsedName(splitAt,[Default]), UsedName(!=,[Default]), UsedName(notify,[Default]), UsedName(tail,[Default]), UsedName(lift,[Default]), UsedName(FilteredKeys,[Default]), UsedName(partition,[Default]), UsedName(toMap,[Default]), UsedName(inits,[Default]), UsedName(-,[Default]), UsedName(empty,[Default]), UsedName(headOption,[Default]), UsedName(filterKeys,[Default]), UsedName(addString,[Default]), UsedName(forall,[Default]), UsedName(math;lina;Entries;MapWrapper;init;,[Default]), UsedName(toIndexedSeq,[Default]), UsedName(zip,[Default]), UsedName(reduceRightOption,[Default]), UsedName(reversed,[Default]), UsedName(finalize,[Default]), UsedName(reduce,[Default]), UsedName(applyOrElse,[Default]), UsedName(exists,[Default]), UsedName(values,[Default]), UsedName(scan,[Default]), UsedName(ne,[Default]), UsedName(getOrElse,[Default]), UsedName(==,[Default]), UsedName(transpose,[Default]), UsedName(:\,[Default]), UsedName(toList,[Default]), UsedName(collect,[Default]), UsedName(andThen,[Default]), UsedName(toIterator,[Default]), UsedName(dropRight,[Default]), UsedName(product,[Default]), UsedName(WithFilter,[Default]), UsedName(scanRight,[Default]), UsedName(scanLeft,[Default]), UsedName(lastOption,[Default]), UsedName(isTraversableAgain,[Default]), UsedName(--,[Default]), UsedName(iterator,[Default]), UsedName(toIterable,[Default]), UsedName(toSeq,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(mkString,[Default]), UsedName(par,[Default]), UsedName(take,[Default]), UsedName(toCollection,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(math.lina.Entries.MapWrapper)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from math.lina.Entries...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(math.lina.Entries)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding math.lina.Entries.Matrix2Entries by math.lina.Entries[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding math.lina.Entries.Map2Entries by math.lina.Entries[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(math.lina.Entries.Map2Entries, math.lina.Entries.Matrix2Entries, math.lina.Entries)[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of math.lina.Matrix. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mNone of the modified names appears in source file of math.lina.Rows.WrapMatrix. This dependency is not being considered for invalidation.[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(math.lina.Entries,ModifiedNames(changes = UsedName(MapWrapper,[Default]))) invalidates 3 classes due to The math.lina.Entries has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(MapWrapper,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(math.lina.Entries.Map2Entries, math.lina.Entries.Matrix2Entries, math.lina.Entries)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set(math.lina.Entries.Matrix2Entries)[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(math.lina.Entries.Matrix2Entries)[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
